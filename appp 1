const express = require('express');
const bodyParser = require('body-parser');
const axios = require('axios');

const app = express();
const port = 3000;

// Middleware
app.use(bodyParser.json());

// In-memory storage for product responses
let productResponses = {
  laptop: 'Thank you for your interest in our laptops! How can we assist you?',
  smartphone: 'Our smartphones are top-notch! What specific information are you looking for?',
};

// Endpoint to get all product responses
app.get('/product-responses', (req, res) => {
  res.json({ success: true, responses: productResponses });
});

// Endpoint to update a product response
app.put('/product-responses/:product', (req, res) => {
  const { product } = req.params;
  const { response } = req.body;

  if (!product || !response) {
    return res.status(400).json({ success: false, message: 'Product and response are required' });
  }

  productResponses = { ...productResponses, [product]: response };

  res.json({ success: true, message: 'Product response updated successfully' });
});

// Endpoint for processing incoming messages
app.post('/process-message', async (req, res) => {
  const { message, platform } = req.body;

  if (!message || !platform) {
    return res.status(400).json({ success: false, message: 'Message and platform are required' });
  }

  let response = '';

  if (platform === 'instagram') {
    response = 'Sorry, automated posting is not supported on Instagram.';
  } else if (platform === 'whatsapp') {
    response = 'Sorry, automated messaging is not supported on WhatsApp.';
  } else {
    const matchedProduct = findProductKeyword(message);
    response = matchedProduct ? productResponses[matchedProduct] : 'Thank you for reaching out! How can we assist you?';
  }

  res.json({ success: true, response });
});

// Helper function to find a product keyword in the message
function findProductKeyword(message) {
  const lowercaseMessage = message.toLowerCase();

  for (const productKeyword in productResponses) {
    if (lowercaseMessage.includes(productKeyword)) {
      return productKeyword;
    }
  }

  return null;
}

app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});
